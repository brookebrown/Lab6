/*
 * Purpose: Data Structure and Algorithms Lab 6 Problem 1
 * Status: Complete and thoroughly tested
 * Last update: 10/10/16
 * Submitted:  10/10/16
 * Comment: test suite and sample run attached
 * @author: Brooke Brown
 * @version: 2016.10.06
 */


public class QueueArrayBased<T> implements QueueInterface<T>
{

    protected T []items;  // an array of list items
    protected int front;  // index of the front item
    protected int back;  // index of the back item
    protected int numItems; //total number of items in queue

    public QueueArrayBased()
    {
        items = (T[]) new Object[3];
        front = 0;
        numItems = 0;
        back = items.length - 1;
    }  // end default constructor

    public boolean isEmpty()
    {
        return (numItems == 0);
    } // end isEmpty

    public void dequeueAll()
    {
        // Creates a new array; marks old array for
        // garbage collection.
        items = (T[]) new Object[3];
        numItems = 0;
        front = 0;
        back = items.length - 1;
//do somethign w front and back...
    } // end dequeueAll

    public void enqueue(T newItem)
    throws  QueueException
    {//adds an item to the back of the queue
        if(items.length == numItems) {
            resize();
        } //resizes if the array is full
        back = (back + 1) % items.length;
        items[back] = newItem;
        numItems++;
    } //end enqueue

    private void resize()
    {
        T []temp = (T[]) new Object[items.length*2];
        for(int i=0; i < numItems; i++) {
            temp[i] = items[(front+i) % items.length];
        }
        front = 0;
        back = numItems - 1;
        items = temp;
    }

    public T peek()
    throws QueueException
    {
        if (numItems != 0)
        {
            return items[front];
        }
        else
        {
            // queue is empty
            throw new QueueException(
                "QueueException on peek");
        }  // end if
    } // end peek

    public T dequeue()
    throws QueueException
    {
        if (numItems != 0)
        {
            T result = items[front];
            items[front] = null;
            front = (front + 1) % items.length;
            numItems--;
            return result;
        }
        else
        {
            // queue is empty
            throw new QueueException(
                "QueueException on pop");
        }  // end if
    } //end dequeue

    public String toString()
    {
        String output = "";
        for(int i=0; i < numItems; i++) {
            output = output + items[(front+i) % items.length] + " ";
        }
        return output;
    }
}
